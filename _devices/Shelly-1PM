# Absoluteley used at your own supervision and risk

substitutions:
  devicename: shelly_1pm_01
  # ip: 192.168.xx.xx
  channel_1: Relay 1

  ssid: <SSID>
  password: !secret wifi_key

  max_power: "1000.0"
  max_temp: "60.0"

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: "ssid"
  password: !secret wifi_key
  domain: !secret domain
  # use_address: 192.168.x.x
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: !secret Fallback_Hotspot

captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:

web_server:
  port: 80

time:
  - platform: sntp
    id: my_time

switch:
  - platform: gpio
    name: "${channel_1} Relay"
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_OFF
    pin: GPIO15
    id: relay
    
sensor:
  - platform: wifi_signal
    name: "${devicename} - WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${devicename} - Uptime"
    icon: mdi:clock-outline
    update_interval: 60s
    
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${devicename} Power"
      unit_of_measurement: W
      id: power_channel_1
      icon: mdi:flash-circle
      accuracy_decimals: 0
      filters:
      #Reading -> actual
      - calibrate_linear:
          - 2.5 -> 0.16
          - 747.0 -> 125.0
          - 1409.0 -> 237.0
          - 2663.0 -> 444.0
          - 8600.0 -> 1390.0
      - lambda: if (x <= 6.0) return 0; else return (x - 6);
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${devicename}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W
    update_interval: 10s
    
  - platform: total_daily_energy
    name: ${channel_1} energy
    power_id: power_channel_1
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kW

  # NTC Temperature
  - platform: ntc
    sensor: ${devicename}_resistance_sensor
    name: "${devicename} Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: mdi:thermometer
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: relay
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${devicename}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C

  - platform: resistance
    id: ${devicename}_resistance_sensor
    sensor: ${devicename}_source_sensor
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: ${devicename}_source_sensor
    pin: A0
    update_interval: 10s

binary_sensor:
  - platform: status
    name: "${devicename} Status"
  # Binary sensor for the button press
  - platform: gpio
    name: "${devicename} Input"
    pin:
      number: GPIO4
    on_state:
      - switch.toggle: relay
    #on_press:
    #  - switch.turn_on: relay
    #on_release:
    #  - switch.turn_off: relay

status_led:
  pin: GPIO0
  #inverted: yes
